Strings ▶️
    1. Character set / ASCII code
    2. Character array
    3. String
    4. Creating a string

ASCII Code ▶️ 
    0 to 127
    A - 65, B - 66, C - 67 ..... Z - 90
    a - 97, b - 98, c - 99 ..... z - 122
    0 - 48, 1 - 49, 2 - 50 ..... 9 - 57
    ↲ - 10, space - 13, esc - 27

Unicodes are for all languages -> ASCII code is a subset of Unicode
Unicodes takes 2 bytes -> 16 bits -> unicode is represented by 4 hexadecimal values -> 4 * 4 bits
ASCII code takes 1 byte -> it takes 7 bits

Char ▶️
    char temp;
    ✓ temp = 'A';
    ✕ temp = 'AB';
    ✕ temp = A;
    ✕ temp = "A";
    cout<<temp;

Char array ▶️
    char X[5];
    char X[5] = {'A', 'B', 'C', 'D', 'E'}; -> A, B, C, D, E
    char X[5] = {65, 66, 67, 68, 69}; -> same array as above -> A, B, C, D, E
    char X[5] = {'A', 'B'} -> A, B, 0, 0, 0
    char name[10] = {'J', 'O', 'H', 'N'}; -> J, O, H, N, 0, 0, 0, 0, 0, 0

    string delimeter / string terminator -> '\0'
    char name[10] = {'J', 'O', 'H', 'N', '\0'}; -> J, O, H, N, \0, 0, 0, 0, 0, 0 -> this is a string
    char name[] = {'J', 'O', 'H', 'N', '\0'};
    char name[] = "JOHN"; -> stack
    char *name = "JOHN"; -> heap

Printing a string ▶️
    char name[10] = {'J', 'O', 'H', 'N', '\0'};
    C ->
    printf("%s", name);
    scanf("%s", name); -> stores single word
    gets(name); -> stores whole sentence

    C++ ->
    cout<<name;
    cin>>name;
    cin.getline(name, 10);

