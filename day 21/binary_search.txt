Binary Search ▶️
    ▶️ The prerequisite for binary search is that the given array must be sorted.
    ▶️ To perform binary search we need three indices -> lower, higher and mid
        mid = (low + higher)/2
        low -> initial element of the list
        higher -> last element of the list
    ▶️ On every step we divide the list into two halves and we reject the part of list that doesn't contain the element.

Time complexity (successful search) ->
    Best case -> O(1)
    Worst case -> O(log n)
Time complexity for any unsuccessful searches -> O(log n)

Average case ->
    = (1 + 1 * 2 + 2 * 4 + 3 * 8...) / n
    = (1 + 1 * 2^1 + 2 * 2^2 + 3 * 2^3...) / n
    = (log n * 2^log n) / n
    = (log n * n^log 2) / n  -> log 2 = 1
    = log n

Average unsuccessful case -> log n